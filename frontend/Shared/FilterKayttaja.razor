@using SharedLib
@inject HttpClient Http

@if (valittavatKayttajat != null)
{

    <div class="mb-3">
        @foreach (var item in valittavatKayttajat)
        {
            <InputCheckbox @bind-Value="@item.IsSelected" style="margin-right: 0.5em" />
            @item.Name
            <br />
        }
    </div>

    <button type="submit" @onclick="Tallenna" class="btn btn-primary">Tallenna</button>
    <button type="reset" @onclick="Tyhjenna" class="btn btn-secondary">Tyhjenna</button>

}
else
{
    <div class="text-center">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}



@code {
    [CascadingParameter] BlazoredModalInstance Modal { get; set; } = default!;


    private KayttajaDTO[]? kayttajat;
    class ValittavaKayttaja
    {
        public string? Name;
        public int Id;
        public bool IsSelected;
    }
    private List<ValittavaKayttaja> valittavatKayttajat = new List<ValittavaKayttaja>();

    [Parameter]
    public int[]? valitutId { get; set; }


    protected override async Task OnInitializedAsync()
    {
        kayttajat = await Http.GetFromJsonAsync<KayttajaDTO[]>("/kayttaja/kaikki");

        PopulateList();

    }


    private async Task Tallenna()
    {
        valitutId = valittavatKayttajat.FindAll(x => x.IsSelected == true).Select(x => (int)x.Id).ToArray();

        await Modal.CloseAsync(ModalResult.Ok((int[])valitutId));
    }

    private void Tyhjenna()
    {
        valittavatKayttajat = new List<ValittavaKayttaja>();
        valitutId = null;
        PopulateList();
    }

    private void PopulateList()
    {
        if (kayttajat != null)
        {
            foreach (var item in kayttajat)
            {
                if (valitutId != null && valitutId.Contains(item.Idkayttaja))
                {
                    valittavatKayttajat.Add(new ValittavaKayttaja
                    {
                        Name = $"{item.Nimi}",
                        Id = item.Idkayttaja,
                        IsSelected = true
                    });
                }
                else
                {
                    valittavatKayttajat.Add(new ValittavaKayttaja
                    {
                        Name = $"{item.Nimi}",
                        Id = item.Idkayttaja,
                        IsSelected = false
                    });
                }

            }
        }
    }
}

